name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xvfb  # For headless testing
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Format check with black
      run: |
        black --check src/
    
    - name: Import sort check with isort
      run: |
        isort --check-only src/
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Test model conversion
      run: |
        python -c "
        import torch
        import sys
        sys.path.append('src')
        from models.cifar_classifier import CIFARClassifier
        model = CIFARClassifier()
        dummy_input = torch.randn(1, 3, 32, 32)
        output = model(dummy_input)
        print(f'Model output shape: {output.shape}')
        assert output.shape == (1, 10), f'Expected (1, 10), got {output.shape}'
        print('Model test passed!')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-training:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-training
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push training image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.training
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-inference:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-inference
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push inference image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.inference
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-aws:
    runs-on: ubuntu-latest
    needs: [build-training, build-inference]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Tag and push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mlops-inference
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Tag the GitHub Container Registry image for ECR
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-inference:latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-inference:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-inference:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to AWS Lambda
      run: |
        # Update Lambda function with new image
        aws lambda update-function-code \
          --function-name mlops-cifar-inference \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/mlops-inference:${{ github.sha }}
        
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name mlops-cifar-inference
        
        # Update alias to point to new version
        aws lambda publish-version \
          --function-name mlops-cifar-inference \
          --description "Deployed from commit ${{ github.sha }}"
    
    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Test the deployed API
        pip install requests
        python -c "
        import requests
        import time
        
        # Health check
        response = requests.get('${{ secrets.API_ENDPOINT }}/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        print('Health check passed!')
        
        # Test prediction (you would need a test image)
        # response = requests.post('${{ secrets.API_ENDPOINT }}/predict', json={'image': 'test_image_base64'})
        # assert response.status_code == 200, f'Prediction test failed: {response.status_code}'
        print('Integration tests passed!')
        "

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-to-aws]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#mlops-alerts'
        text: 'üöÄ MLOps pipeline deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#mlops-alerts'
        text: '‚ùå MLOps pipeline deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

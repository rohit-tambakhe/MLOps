version: '3.8'

services:
  training:
    build:
      context: ..
      dockerfile: docker/Dockerfile.training
    container_name: mlops-training
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../checkpoints:/app/checkpoints
      - ../models:/app/models
      - ../metrics:/app/metrics
      - ../plots:/app/plots
    environment:
      - WANDB_API_KEY=${WANDB_API_KEY}
      - PYTHONPATH=/app
    networks:
      - mlops-network
    profiles:
      - training

  inference:
    build:
      context: ..
      dockerfile: docker/Dockerfile.inference
    container_name: mlops-inference
    ports:
      - "8000:8000"
    volumes:
      - ../models:/app/models:ro
    environment:
      - MODEL_PATH=/app/models/cifar_classifier.onnx
      - PORT=8000
      - PYTHONPATH=/app
    networks:
      - mlops-network
    profiles:
      - inference
    depends_on:
      - training
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    volumes:
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - mlops-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

networks:
  mlops-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
